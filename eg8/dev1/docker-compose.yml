version: '2.3'

services:
    dds_updater:
        build: dds_updater/.
        volumes:
            - ./dds_updater/dds:/dds
        network_mode: service:husarnet
        stdin_open: true # docker run -i
        tty: true        # docker run -t

    color_controller:
        build:
            context: ../../
            dockerfile: eg8/dev1/turtle_controller/Dockerfile
        volumes:
            - ./dds_updater/dds:/dds
        command:
            - bash
            - -c
            - |
                source /ros2_ws/install/setup.bash
                export CYCLONEDDS_URI=file:///dds/cyclonedds.xml
                ros2 run my_demo_pkg color_controller
        network_mode: service:husarnet
        
    move_controller:
        build:
            context: ../../
            dockerfile: eg8/dev1/turtle_controller/Dockerfile
        volumes:
            - ./dds_updater/dds:/dds
        command:
            - bash
            - -c
            - |
                source /ros2_ws/install/setup.bash
                export CYCLONEDDS_URI=file:///dds/cyclonedds.xml
                ros2 run my_demo_pkg move_controller
        network_mode: service:husarnet

    husarnet:
        image: husarnet/husarnet
        restart: unless-stopped
        volumes:
            - /var/lib/husarnet  # This will persist your Husarnet Client keys, thus IP of the container will be stable/the same between (re)boots
        sysctls:
            - net.ipv6.conf.all.disable_ipv6=0  # Husarnet is using IPv6 for the internal connections
        cap_add:
            - NET_ADMIN
        devices:
            - /dev/net/tun
        env_file: 
            - ./.env  # create .env file in the same folder as Dockerfile and specify HOSTNAME and JOINCODE there
        # network_mode: service:turtle_controller  # This is the most important line in this setup. This will put the Husarnet Client in the same network namespace as your app (in this example: turtle_sim)

volumes:
    shared_cyclonedds_xml: